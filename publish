#!/bin/sh

die () {
  echo "$1" >/dev/stderr
  [ -n "$(which Snarl_CMD 2>/dev/null)" ] && Snarl_CMD snShowMessage 10 "Dive Into HTML5" "$1." "C:\Users\pilgrim\site-lisp\todochiku-icons\alert.png"
  exit 1
}

echo "started build"

# build table of contents
python3 util/buildtoc.py

# make build directory and copy original files there for preflighting
rm -rf build
mkdir build
cp robots.txt .htaccess *.css *.ico build/
cp -R j build/
cp -R i build/
cp -R f build/
rm -f examples/*.pyc
cp -R examples build/
mkdir build/fonts-original
cp fonts-original/*.tar.gz build/fonts-original/

echo "validating HTML"
for f in *.html; do
  python3 util/validate.py "$f" > /dev/null || die "Failed to validate $f"
done

echo "minimizing HTML"

# minimize HTML (NB: this script is quite fragile and relies on knowledge of how I write HTML)
for f in *.html; do
  python3 util/htmlminimizer.py "$f" build/"$f" || die "Failed to minimize $f"
done

# build sitemap
ls build/*.html | sed -e "s|build/|http://diveintohtml5.org/|g" -e "s|/index.html|/|g" > build/sitemap.txt || die "Failed to build sitemap"

echo "adding evil tracking code"

# add Google Analytics script
for f in build/*.html; do
  cat "$f" j/ga.js > build/tmp && \
      mv build/tmp "$f" || die "Could not add tracking code to $f"
done

# minimize JS and CSS
echo "minimizing JS"
revision=`hg log|grep changeset|cut -d":" -f3|head -1`
java -jar util/yuicompressor-2.4.2.jar build/j/dih5.js > build/j/dih5.min.js || die "Failed to minimize JS"
java -jar util/yuicompressor-2.4.2.jar build/j/canvastext-fx3.js > build/j/canvastext-fx3.min.js || die "Failed to minimize JS"
java -jar util/yuicompressor-2.4.2.jar build/j/html5-video.js > build/j/html5-video.min.js || die "Failed to minimize JS"

# combine jQuery, Modernizr, other 3rd party scripts, and our own scripts
echo "combining JS"
cat build/j/legal.js build/j/jquery.min.js build/j/modernizr.min.js build/j/canvastext-fx3.min.js build/j/dih5.min.js > build/j/$revision.js && \
cat build/j/legal.js build/j/gears_init.min.js build/j/geo.min.js > build/j/$revision-maps.js && \
cat build/j/legal.js build/j/flowplayer-3.1.4.min.js build/j/html5-video.min.js > build/j/$revision-video.js && \
sed -i -e "s|<script src=j/jquery.js></script>||g" \
       -e "s|<script src=j/modernizr.js></script>||g" \
       -e "s|<script src=j/gears_init.js></script>||g" \
       -e "s|<script src=j/geo.js>|<script src=j/${revision}-maps.js>|g" \
       -e "s|<script src=j/canvastext-fx3.js></script>||g" \
       -e "s|<script src=j/flowplayer-3.1.4.min.js></script>||g" \
       -e "s|<script src=j/html5-video.js>|<script src=j/${revision}-video.js>|g" \
       -e "s|<script src=j/dih5.js>|<script src=j/${revision}.js>|g" build/*.html || die "Failed to combine JS"

echo "minimizing CSS"
sed -i -e "s|url(i/|url(//d.wearehugh.com/dih5/|g" build/screen.css || die "Failed to inline CSS"
java -jar util/yuicompressor-2.4.2.jar build/screen.css > build/$revision.css && \
    sed -i -e "s|;}|}|g" build/$revision.css || die "Failed to minimize CSS"

# put CSS inline
echo "inlining CSS"
css=`cat build/$revision.css`
sed -i -e "s|<link rel=stylesheet href=screen.css>|<style>${css}</style>|g" -e "s|</style><style>||g" build/*.html || die "Failed to inline CSS"

# remove unused CSS properties on a page-by-page basis
echo "removing unused CSS"
for f in build/*.html; do
  python2.6 util/lesscss.py "$f" || die "Failed to remove unused CSS"
done

# minimize URLs
echo "minimizing URLs"
sed -i -e "s|=http:|=|g" build/*.html && \
    sed -i -e "s|href=index.html|href=/|g" build/*.html || die "Failed to minimize URLs"

# set file permissions (hg resets these, don't know why)
chmod 755 build/examples build/j build/i build/f build/fonts-original && \
    chmod 644 build/*.html build/*.txt build/*.ico build/examples/* build/examples/.htaccess build/j/* build/j/.htaccess build/i/* build/i/.htaccess build/f/* build/f/.htaccess build/.htaccess build/fonts-original/*.tar.gz || die "Failed to reset file permissions"

#die "Intentionally aborting without publishing"
# ship it!
echo -n "publishing"
rsync -essh -a --exclude="*.mp4" --exclude="*.ogv" build/i/* build/i/.htaccess diveintomark.org:~/web/wearehugh.com/dih5/ && \
    echo -n "." && \
    rsync -essh -a build/i/*.mp4 build/i/*.ogv build/i/pastel.png diveintomark.org:~/web/diveintohtml5.org/i/ && \
    echo -n "." && \
    rsync -essh -a build/j/$revision*.js build/j/html5.js build/j/html5-video.js build/j/excanvas.min.js build/j/*.swf build/j/.htaccess diveintomark.org:~/web/diveintohtml5.org/j/ && \
    echo -n "." && \
    rsync -essh -a build/f/*.ttf build/f/*.eot build/f/.htaccess diveintomark.org:~/web/diveintohtml5.org/f/ && \
    echo -n "." && \
    rsync -essh -a build/examples build/*.txt build/*.ico build/*.html build/.htaccess build/fonts-original diveintomark.org:~/web/diveintohtml5.org/ && \
    echo "." || die "Failed to publish to remote server"

[ -n "$(which Snarl_CMD 2>/dev/null)" ] && Snarl_CMD snShowMessage 10 "Dive Into HTML5" "Published." "C:\Users\pilgrim\site-lisp\todochiku-icons\clean.png"
